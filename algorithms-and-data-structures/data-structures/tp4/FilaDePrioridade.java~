public class FilaDePrioridade {
	
	private class NodoDaFila {
		
		NodoBinario info;
		NodoDaFila prev, next;

		NodoDaFila (NodoBinario x) { info = x; prev = next = null; }
	}
	
	static NodoDaFila first, last;
	static int numNodos = 0;

	//Construtor
	public FilaDePrioridade (NodoBinario[] entrada) {				
		for (NodoBinario x : entrada) {
			this.insere( x );
		}
	}
	/** Insere um NodoBinario na lista */
	void insere (NodoBinario n) {
		if (this.numNodos == 0)this.first = this.last = new NodoDaFila (n);
		else {
			NodoDaFila insere = new NodoDaFila (n);
			insere.prev = this.last;
			this.last.next = insere;
			this.last = insere;
		}
		this.numNodos++;
	}
	/** Remove um NodoBinario da lista */
	void remove (NodoDaFila n) {
		if (this.first == n) {
			n.next.prev = null;
			this.first = n.next;
			n.next = null;
		} else if (this.last == n) {
			n.prev.next = null;
			this.last = n.prev;
			n.prev = null;
		} else {
			n.prev.next = n.next;
			n.next.prev = n.prev;
			n.next = n.prev = null;
		}
		this.numNodos--;
	}
	/** Extrai o nodo binario que guarda o menor valor */
	NodoBinario extraiMenor() {

		NodoDaFila retira = this.first;

		double freqAtual = retira.info.getHufPar().obtemFreq();

		NodoDaFila atual = this.first.next;

		for ( int i=1; i<this.numNodos; i++ ) {
			if ( atual.info.getHufPar().obtemFreq() < freqAtual ) {
				retira = atual;
				freqAtual = retira.info.getHufPar().obtemFreq();
			}
			atual = atual.next;
		}
		this.remove(retira);
		return retira.info;	
	}
	//PRINT FILA
	void printFila() {
		NodoDaFila atual = this.first;
		if (this.numNodos > 0) {
			while (true) {
				System.out.print( this.numNodos );
				System.out.print( this.last.info.getHufPar().obtemFreq()+"\n" );
				//System.out.print( atual.info.getHufPar().obtemCaracter() );
				//System.out.print( atual.info.getHufPar().obtemFreq()+"\n" );
				if (atual != this.last) atual=atual.next;
				else break;
			}
		}
	}
}
